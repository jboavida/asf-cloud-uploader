/**
 * @see {@link https://github.com/jboavida/asf-cloud-uploader}
 * @copyright Jo√£o Pedro Boavida 2017
 * @license MIT
 */
"use strict";angular.module("angularSchemaFormCloudUploader",["angularFileUpload","schemaForm","templates"]).config(["schemaFormDecoratorsProvider","sfBuilderProvider","sfErrorMessageProvider",function(e,a,l){e.defineAddOn("bootstrapDecorator","cloud-uploader","src/templates/angular-schema-form-cloud-uploader.html",a.stdBuilders),l.setDefaultMessage("missingFile","No file selected"),l.setDefaultMessage("uploadFailed","An upload has failed"),l.setDefaultMessage("uploadOngoing","Still uploading")}]),angular.module("angularSchemaFormCloudUploader").value("asfCloudUploaderDefaults",{alias:"file",data:[],dropOverHtmlClass:"nv-file-over",dropZoneHtmlClass:"ng-hide",fieldHtmlClass:"btn btn-default",headers:{},selectLabel:"Upload",queueHtmlClass:"table table-condensed table-striped",queueItemProgressHtmlClass:"progress-bar",queueItemRemoveHtmlClass:"btn btn-danger btn-xs",queueItemRemoveLabel:"Unlist",triggerSubmitHtmlClass:"checkbox"}).directive("asfCloudUploader",["asfCloudUploaderDefaults","FileUploader",function(e,a){return{require:"ngModel",scope:!0,link:{pre:function(l,s,r,n){var t="array"==l.form.schema.type,o=l.form=angular.extend({maxItems:l.form.schema.maxItems||Number.MAX_VALUE},e,{selectMultiple:t},l.form);Element.prototype.closest||delete o.triggerSubmit,o.selectMultiple&&t||(o.maxItems=1),1==o.maxItems&&delete o.selectMultiple;var u=o.data||[];angular.isArray(u)||(u=[u]);var i=new a({url:o.url,alias:o.alias||"file",headers:o.headers||[],formData:u,autoUpload:!0,queueLimit:o.maxItems,withCredentials:o.withCredentials});l.state={};var d=l.updateModel=function(){var e=l.uploader.queue.map(function(e){return e.file.name});if(n.$setViewValue(t?e:e[0]),l.hasSuccess&&l.hasSuccess()&&l.$broadcast("schemaFormValidate"),n.$valid&&e.length&&l.state.triggerSubmit){var a=angular.element(s[0].closest("form, ng-form"));a&&a.hasClass("ng-valid")&&a.triggerHandler("submit")}};i.onCompleteAll=d,n.$validators.uploadFailed=function(){for(var e in l.uploader.queue){var a=l.uploader.queue[e];if(a.isCancel||a.isError)return!1}return!0},n.$validators.uploadOngoing=function(){return!l.uploader.getNotUploadedItems().length},l.queueOpen=function(){return l.uploader.queue.length<l.uploader.queueLimit},l.uploader=i},post:function(e,l,s,r){function n(){var l=e.uploader;if(!l.queue.length){var s=r.$viewValue;"string"==typeof s&&(s=[s]),angular.isArray(s)&&s.length&&angular.forEach(s,function(e){var s=new a.FileItem(l,{name:e});s.progress=100,s.isUploaded=!0,s.isSuccess=!0,l.queue.push(s)})}}if(e.form.selectMultiple){var t=l[0].querySelector('input[type="file"]');angular.element(t).attr("multiple","")}var o=e.$watch("ngModel.$viewValue",function(){o(),n()})}}}}]),angular.module("templates",[]).run(["$templateCache",function(e){e.put("src/templates/angular-schema-form-cloud-uploader.html",'<fieldset class="form-group {{::form.htmlClass}}" ng-class="{\n  \'has-feedback\': form.feedback !== false,\n  \'has-error\': form.disableErrorState !== true && hasError(),\n  \'has-success\': form.disableSuccessState !== true && hasSuccess(),\n  \'required\': form.required === true\n}">\n  <legend class="control-label {{::form.labelHtmlClass}}"\n    ng-class="{ \'sr-only\': !showTitle() }">{{form.title}}</legend>\n\n  <span ng-if="form.feedback !== false" ng-class="{\n      \'glyphicon-ok\': form.disableSuccessState !== true && hasSuccess(),\n      \'glyphicon-remove\': form.disableErrorState !== true && hasError()\n    }" class="form-control-feedback glyphicon" aria-hidden="true"></span>\n\n  <span class="help-block" sf-message="form.description"></span>\n\n  <div asf-cloud-uploader schema-validate="form" sf-changed="form"\n    sf-field-model>\n    <table ng-show="uploader.queue.length" class="{{::form.queueHtmlClass}}">\n      <tr ng-repeat="item in uploader.queue">\n        <td class="{{::form.queueItemNameHtmlClass}}"\n          nowrap>{{item.file.name}}</td>\n\n        <td>\n          <button class="{{::form.queueItemRemoveHtmlClass}}"\n            ng-click="item.remove(); updateModel()" ng-disabled="form.readonly">\n            <span ng-if="form.queueItemRemoveIcon"\n              class="{{::form.queueItemRemoveIcon}}"></span>\n            {{form.queueItemRemoveLabel}}\n          </button>\n        </td>\n\n        <td ng-if="uploader.isHTML5" width="100%">\n          <div class="progress" ng-style="{ \'margin\': \'1px 0 0\' }">\n            <div class="{{::form.queueItemProgressHtmlClass}}"\n              ng-class="{ \'progress-bar-striped\': item.isUploading }"\n              ng-style="{ width: item.progress + \'%\' }" role="progressbar"\n              aria-valuemin="0" aria-valuemax="100"\n              aria-valuenow="{{item.progress}}">\n              <span class="sr-only">{{item.progress}}% complete</span>\n            </div>\n          </div>\n        </td>\n\n        <td nowrap>\n          <span ng-if="form.feedback !== false"><span ng-class="{\n            \'glyphicon-ok\': form.disableSuccessState !== true && item.isSuccess,\n            \'glyphicon-remove\': form.disableErrorState !== true && item.isError\n          }" class="glyphicon" aria-hidden="true"></span>&nbsp;</span>\n          <span class="sr-only">\n            {{item.isSuccess ? \'(uploaded)\' : item.isError ? \'(error)\' : \'\'}}\n          </span>\n        </td>\n      </tr>\n    </table>\n\n    <div ng-if="form.readonly !== true && uploader.isHTML5"\n      class="{{::form.dropZoneHtmlClass}}" nv-file-drop nv-file-over\n      over-class="{{::form.dropOverHtmlClass}}" uploader="uploader"></div>\n\n    <label class="{{::form.fieldHtmlClass}}"\n      ng-class="{ \'{{::form.fieldFocusHtmlClass}}\' : state.focus }"\n      role="button" ng-disabled="form.readonly || !queueOpen()">\n      <span ng-if="form.selectIcon" class="{{::form.selectIcon}}"></span>\n      {{form.selectLabel}}\n      <input type="file" ng-disabled="form.readonly || !queueOpen()"\n        ng-blur="state.focus = false " ng-focus="state.focus = true"\n        nv-file-select uploader="uploader" class="sr-only" />\n    </label>\n\n    <div ng-if="form.triggerSubmit"\n      class="{{::form.triggerSubmitHtmlClass}}"><label>\n      <input ng-disabled="uploader.queue.length && !uploader.isUploading"\n        ng-model="state.triggerSubmit" type="checkbox" />\n      {{form.triggerSubmit}}\n    </label></div>\n  </div>\n</fieldset>\n')}]);